import{s as a}from"./index-o6bm3qdW.js";const s="avatars";async function _(r){if(!r)return console.error("getUserProfile called without userId"),null;try{const{data:e,error:o}=await a.from("profiles").select("id, username, dietary_preference, avatar_url, difficulty_preference, max_prep_time, allergies_restrictions, gemini_api_key, excluded_ingredients, available_equipment").eq("id",r).single();return o?(o.code!=="PGRST116"&&console.warn(`Error fetching profile for user ${r} (but not PGRST116):`,o.message),null):{id:e.id,email:void 0,username:e.username||null,dietary_preference:e.dietary_preference||null,avatar_url:e.avatar_url||null,difficulty_preference:e.difficulty_preference||null,max_prep_time:e.max_prep_time||null,allergies_restrictions:e.allergies_restrictions||null,gemini_api_key:e.gemini_api_key||null,excluded_ingredients:e.excluded_ingredients||[],available_equipment:e.available_equipment||[]}}catch(e){return console.error(`Unexpected error fetching user profile for user ${r}:`,e),null}}async function c(r,e){if(!r)return console.error("updateUserProfile called without userId"),!1;if(!e||Object.keys(e).length===0)return console.warn(`updateUserProfile called for user ${r} with empty profileData.`),!0;try{const o={...e};if(Object.keys(o).length===0)return console.warn(`updateUserProfile called for user ${r} with effectively no data to update after potential filtering.`),!0;const{error:t}=await a.from("profiles").update(o).eq("id",r);return t?(console.error(`Error updating profile for user ${r}:`,t),!1):(console.log(`Profile updated successfully for user ${r}:`,o),!0)}catch(o){return console.error(`Unexpected error updating user profile for user ${r}:`,o),!1}}async function g(r){try{const{data:{user:e},error:o}=await a.auth.getUser();if(o||!e)throw new Error("Usuario no autenticado.");const t=r.name.split(".").pop(),u=`${`${e.id}-${Date.now()}.${t}`}`,{error:i}=await a.storage.from(s).upload(u,r,{cacheControl:"3600",upsert:!0});if(i)throw console.error("Error uploading avatar:",i),i;const{data:l}=a.storage.from(s).getPublicUrl(u);if(!(l!=null&&l.publicUrl))throw console.error("Could not get public URL for uploaded avatar"),new Error("No se pudo obtener la URL p√∫blica del avatar.");const n=l.publicUrl;if(!await c(e.id,{avatar_url:n}))throw console.warn("Avatar uploaded but failed to update profile URL."),new Error("Avatar subido, pero no se pudo actualizar el perfil.");return console.log("Avatar uploaded and profile updated:",n),n}catch(e){return console.error("Error in uploadAvatar process:",e),null}}export{c as a,_ as g,g as u};
