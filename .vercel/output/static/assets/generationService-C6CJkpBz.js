import{g as y}from"./userService-CZh88SKG.js";import{g as b}from"./pantryService-1OnSk01a.js";const I=(s,e,r)=>{let n=`Genera una receta de cocina creativa utilizando principalmente los siguientes ingredientes que tengo disponibles: ${s.join(", ")}. `;return r?n+=`Contexto adicional: ${r}. Intenta que sea algo diferente a otras recetas generadas recientemente si es posible. `:n+="Intenta que sea una receta interesante y variada. ",n+=`Puedes usar otros ingredientes comunes si es necesario.

`,e&&(n+=`Considera las siguientes preferencias del usuario:
`,e.dietary_preference&&(n+=`- Preferencia dietética: ${e.dietary_preference}
`),e.allergies_restrictions&&(n+=`- Alergias/Restricciones: ${e.allergies_restrictions}
`),e.difficulty_preference&&(n+=`- Dificultad preferida: ${e.difficulty_preference}
`),e.max_prep_time&&(n+=`- Tiempo máximo de preparación: ${e.max_prep_time} minutos
`),e.excluded_ingredients&&e.excluded_ingredients.length>0&&(n+=`- Ingredientes a evitar estrictamente: ${e.excluded_ingredients.join(", ")}
`),e.available_equipment&&e.available_equipment.length>0&&(n+=`- Equipamiento de cocina disponible: ${e.available_equipment.join(", ")}
`),n+=`
`),n+="Formatea la respuesta completa como un único objeto JSON válido contenido dentro de un bloque de código JSON (```json ... ```). El objeto JSON debe tener las siguientes claves: 'title' (string), 'description' (string), 'prepTimeMinutes' (number), 'cookTimeMinutes' (number), 'servings' (number), 'ingredients' (array of objects with 'quantity' (string o number), 'unit' (string, puede ser null o vacío), 'name' (string)), y 'instructions' (array of strings). Asegúrate que el JSON sea válido y completo.",n},v=s=>{try{const e=JSON.parse(s);return!e||typeof e.title!="string"||!Array.isArray(e.ingredients)||!Array.isArray(e.instructions)||typeof e.prepTimeMinutes!="number"||typeof e.cookTimeMinutes!="number"||typeof e.servings!="number"?(console.error("JSON parseado pero con formato inválido o tipos incorrectos:",e),null):(e.ingredients=e.ingredients.map(r=>({quantity:r.quantity??"",unit:r.unit??"",name:r.name??"Ingrediente desconocido"})).filter(r=>r.name!=="Ingrediente desconocido"&&r.name.trim()!==""),e.instructions=e.instructions.map(r=>typeof r=="string"?r:String(r)).filter(r=>r.trim()!==""),e.ingredients.length===0||e.instructions.length===0?(console.error("Receta parseada pero sin ingredientes o instrucciones válidos después de limpiar:",e),null):e)}catch(e){return console.error("Error al parsear la respuesta JSON de la API:",e,s),null}},R=async(s,e)=>{var n,c,t,d,l,p,i;console.log("Llamando a la API de Gemini...");const r=`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${s}`;try{const a=await fetch(r,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({contents:[{parts:[{text:e}]}],generationConfig:{responseMimeType:"application/json"}})});if(!a.ok){const u=await a.text();let m={};try{m=JSON.parse(u)}catch{}const A=((n=m==null?void 0:m.error)==null?void 0:n.message)||`Error API Google (${a.status}): ${a.statusText}`;return console.error("Error API Google:",a.status,m),{error:A}}const o=await a.json();if(console.log("Respuesta cruda de Gemini:",o),(c=o.promptFeedback)!=null&&c.blockReason)return console.error("Respuesta bloqueada por Google:",o.promptFeedback),{error:`Solicitud bloqueada por seguridad: ${o.promptFeedback.blockReason}`};if(!o.candidates||o.candidates.length===0||!((l=(d=(t=o.candidates[0].content)==null?void 0:t.parts)==null?void 0:d[0])!=null&&l.text)){const u=(i=(p=o.candidates)==null?void 0:p[0])==null?void 0:i.finishReason;return u&&u!=="STOP"?(console.error(`Generación detenida por razón: ${u}`,o),{error:`La generación falló o fue detenida (${u}).`}):(console.error("Respuesta inesperada de Google (sin contenido válido):",o),{error:"No se recibió contenido de receta válido en la respuesta de la API."})}const g=o.candidates[0].content.parts[0].text,f=v(g);return f?(console.log("Receta generada y parseada con éxito."),f):(console.error("Fallo al parsear la respuesta de Gemini:",g),{error:"La respuesta de la API no contenía un JSON de receta válido."})}catch(a){return console.error("Error inesperado llamando a Gemini:",a),{error:a.message||"Error inesperado durante la llamada a la API."}}},$=async(s,e)=>{console.log(`Iniciando generación de una receta para el usuario ${s}`);let r,n=null;try{n=await y(s),r=(n==null?void 0:n.gemini_api_key)??void 0,r&&console.log("[generateSingleRecipe] API Key obtenida del perfil.")}catch(l){console.warn("[generateSingleRecipe] No se pudo obtener el perfil del usuario:",l)}if(r||(r="AIzaSyB0rXAlRRLVcV0iykwbA0v9eTfIyAz5uI8",r&&console.log("[generateSingleRecipe] API Key obtenida de VITE_GEMINI_API_KEY.")),!r)return console.error("[generateSingleRecipe] No API key available."),{error:"No se encontró API Key para Gemini."};const c=n;let t=[];try{const l=await b();l&&l.length>0?(t=l.map(p=>{var i;return(i=p.ingredient)==null?void 0:i.name}).filter(p=>!!p&&p.trim()!==""),t.length===0&&(console.warn("[generateSingleRecipe] La despensa tiene items pero sin nombres válidos. Generando receta más genérica."),t=[]),console.log(`[generateSingleRecipe] Ingredientes de despensa (${t.length}):`,t)):(console.log("[generateSingleRecipe] La despensa está vacía. Generando receta genérica."),t=[])}catch(l){console.error("[generateSingleRecipe] Error al obtener ingredientes de la despensa:",l),t=[]}const d=I(t,c??void 0,e);return console.log("[generateSingleRecipe] Llamando a callGeminiApi..."),R(r,d)},P=async(s,e)=>{console.log(`Iniciando generación de ${s} recetas para el usuario ${e}`);const r={successfulRecipes:[],errors:[]};let n,c=null;try{c=await y(e),n=(c==null?void 0:c.gemini_api_key)??void 0,n&&console.log("API Key obtenida del perfil.")}catch(i){console.warn("No se pudo obtener el perfil del usuario:",i)}if(n||(n="AIzaSyB0rXAlRRLVcV0iykwbA0v9eTfIyAz5uI8",n&&console.log("API Key obtenida de VITE_GEMINI_API_KEY.")),!n)return console.error("No API key available."),{successfulRecipes:[],errors:Array(s).fill(0).map((i,a)=>({index:a,message:"No se encontró API Key para Gemini."}))};const t=c;let d=[];try{const i=await b();if(i&&i.length>0){if(d=i.map(a=>{var o;return(o=a.ingredient)==null?void 0:o.name}).filter(a=>!!a&&a.trim()!==""),d.length===0)return console.warn("La despensa tiene items pero sin nombres válidos."),{successfulRecipes:[],errors:Array(s).fill(0).map((a,o)=>({index:o,message:"No se encontraron nombres válidos en los ingredientes de tu despensa."}))};console.log(`Ingredientes de despensa (${d.length}):`,d)}else return console.log("La despensa está vacía."),{successfulRecipes:[],errors:Array(s).fill(0).map((a,o)=>({index:o,message:"Tu despensa está vacía. No se pueden generar recetas basadas en ella."}))}}catch(i){return console.error("Error al obtener ingredientes de la despensa:",i),{successfulRecipes:[],errors:Array(s).fill(0).map((a,o)=>({index:o,message:`Error al obtener la despensa: ${i.message||"Error desconocido"}`}))}}const l=[];for(let i=0;i<s;i++){const a=`Receta ${i+1} de ${s} para la planificación semanal.`,o=I(d,t??void 0,a);l.push(R(n,o))}console.log(`Realizando ${s} llamadas a Gemini en paralelo...`);const p=await Promise.allSettled(l);return console.log("Resultados de las llamadas a Gemini:",p),p.forEach((i,a)=>{var o;if(i.status==="fulfilled"){const g=i.value;"error"in g?(console.error(`Error generando receta ${a+1}: ${g.error}`),r.errors.push({index:a,message:g.error})):r.successfulRecipes.push(g)}else console.error(`Error inesperado en la promesa de generación ${a+1}:`,i.reason),r.errors.push({index:a,message:((o=i.reason)==null?void 0:o.message)||"Error desconocido en la promesa de generación."})}),console.log(`Generación completada. Éxitos: ${r.successfulRecipes.length}, Errores: ${r.errors.length}`),r};export{P as a,$ as g};
